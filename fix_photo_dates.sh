#!/bin/bash

# Default directory if no argument is provided
DEFAULT_DIR="/var/www/nextcloud/data/yourusername/files"
TARGET_DIR="${1:-$DEFAULT_DIR}"
LOGFILE="/var/log/nextcloud_photo_fix.log"

# Check if the target directory exists
if [ ! -d "$TARGET_DIR" ]; then
  echo "Directory not found: $TARGET_DIR" | tee -a "$LOGFILE"
  exit 1
fi

echo "Processing directory: $TARGET_DIR" | tee -a "$LOGFILE"

# Extract Nextcloud path (e.g., yourusername/files/Photos from 2014)
NC_PATH="${TARGET_DIR#/var/www/nextcloud/data/}"
echo "Nextcloud relative path: $NC_PATH" | tee -a "$LOGFILE"

# Process files for EXIF and JSON metadata
find "$TARGET_DIR" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.mp4" \) | while read file; do

  # Extract EXIF DateTimeOriginal
  exif_date_full=$(exiftool -s -s -s -DateTimeOriginal "$file" | awk '{print $1, $2}')

  # If EXIF data is present, apply it as the FileModifyDate
  if [ -n "$exif_date_full" ]; then
    current_date_full=$(exiftool -s -s -s -FileModifyDate "$file" | awk '{print $1, $2}' | sed 's/+.*//')

    # Apply EXIF date only if it differs from the current FileModifyDate
    if [ "$current_date_full" != "$exif_date_full" ]; then
      echo "Comparing EXIF: $exif_date_full vs FileModifyDate: $current_date_full" | tee -a "$LOGFILE"
      echo "Applying EXIF date for $file: $exif_date_full (from EXIF)" | tee -a "$LOGFILE"
      sudo exiftool -overwrite_original "-FileModifyDate=$exif_date_full" "$file"
    else
      echo "Skipping $file; EXIF date already applied" | tee -a "$LOGFILE"
    fi


  else
    # If EXIF is missing, look for the supplemental metadata JSON
    # If EXIF is missing, look for the supplemental metadata JSON
    echo "EXIF missing for $file; checking for JSON..." | tee -a "$LOGFILE"

    # Match all potential JSON files with `supplemental-*.json`
    for jsonfile in "${file}".supplemental-*.json; do
      # Check if the file actually exists
      [ -f "$jsonfile" ] || continue

      echo "Found supplemental JSON: $jsonfile" | tee -a "$LOGFILE"

      # Extract timestamp from JSON
      timestamp=$(jq -r '.photoTakenTime.timestamp' "$jsonfile")

      # Ensure the timestamp is numeric
      if [[ "$timestamp" =~ ^[0-9]+$ ]]; then
        formatted_date=$(date -d @"$timestamp" "+%Y:%m:%d %H:%M:%S")

        # Validate the formatted date
        if [[ "$formatted_date" =~ ^[[:digit:]]{4}:[[:digit:]]{2}:[[:digit:]]{2}[[:space:]][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}$ ]]; then

          # Extract current FileModifyDate and remove timezone offset
          current_date_full=$(exiftool -s -s -s -FileModifyDate "$file" | awk '{print $1, $2}' | sed 's/+.*//')

          # Compare current date with JSON date
          if [ "$current_date_full" != "$formatted_date" ]; then
            echo "Setting date for $file to $formatted_date (from JSON)" | tee -a "$LOGFILE"
            sudo exiftool -overwrite_original "-FileModifyDate=$formatted_date" "-EXIF:DateTimeOriginal=$formatted_date" "$file"
            break  # Stop after applying the first valid JSON file
          else
            echo "Skipping $file; FileModifyDate already matches JSON date" | tee -a "$LOGFILE"
          fi

        else
          echo "Warning: Invalid formatted date in $jsonfile: $formatted_date" | tee -a "$LOGFILE"
        fi

      else
        echo "Warning: Invalid or missing timestamp in $jsonfile" | tee -a "$LOGFILE"
      fi

    done

  fi
done


# Remove backup files generated by exiftool
sudo find "$TARGET_DIR" -name "*.jpg_original" -delete
sudo find "$TARGET_DIR" -name "*.jpeg_original" -delete
sudo find "$TARGET_DIR" -name "*.mp4_original" -delete 

# Re-scan files in Nextcloud
if [ -n "$NC_PATH" ]; then
  echo "Scanning Nextcloud path: $NC_PATH" | tee -a "$LOGFILE"
  sudo -u www-data php /var/www/nextcloud/occ files:scan --path="$NC_PATH" >> "$LOGFILE" 2>&1
else
  echo "Scanning all files in Nextcloud" | tee -a "$LOGFILE"
  sudo -u www-data php /var/www/nextcloud/occ files:scan --all >> "$LOGFILE" 2>&1
fi

echo "Completed processing at $(date)" | tee -a "$LOGFILE"
